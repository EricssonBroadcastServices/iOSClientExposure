# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.7"

default_platform :ios
podspec_name = "iOSClientExposure.podspec" 


platform :ios do
    before_all do
        
    end
    
    desc "Bumps build number and runs unit tests on each push to development branch"
    desc "If successful, pushes the bumped version to git"
    lane :development do
        ensure_git_branch(branch: ENV["DEVELOPMENT_BRANCH"])
        ensure_git_status_clean
        
#        update_graph

        #sh "cd .. && carthage.sh update --use-submodules --use-xcframeworks"
        
        build_spm

        #run_spm_tests

        bump_build_number
        
#        clean_build_artifacts
        
        push_to_git_remote
        
        notify_slack_dev_success
    end


    desc "Release a new version with a patch bump_type"
    lane :patch do
        release("patch")
    end

    desc "Release a new version with a minor bump_type"
    lane :minor do
        release("minor")
    end

    desc "Release a new version with a major bump_type"
    lane :major do
        release("major")
    end


    ### Build for different dependecy management systems 
    #### 
    ### ================== 
    desc "Build project using spm"
    lane :build_spm do

        sh 'swift build -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk iphonesimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios13.0-simulator"'
        UI.success("== iOS Project build successfully with spm ==")

        sh 'swift build -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk appletvsimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-tvos13.0-simulator"'
        UI.success("== tvOS Project build successfully with spm ==")
    end


    desc "Build project using Carthage"
    lane :build_carthage do 
        carthage(command: "update", no_skip_current: false, use_xcframeworks: true, new_resolver: true, platform: "ios")
        UI.success("== iOS Project build successfully with Carthage ==")

        carthage(command: "update", no_skip_current: false, use_xcframeworks: true, new_resolver: true, platform: "tvos")
        UI.success("== tvOS Project build successfully with Carthage ==")
    end

    desc "Build project using Cocoapods"
    lane :build_pod do 
        #path = ENV["PATH"]
        Dir.chdir("..") do
            sh 'pod lib lint --allow-warnings'
            #pod_lib_lint(allow_warnings: true)
          end
        
    end


    desc "Releases a new version automatically"
    lane :release do
    
        pod_lib_lint(allow_warnings: true)
        
        version = version_bump_podspec(path: podspec_name)
        
        git_add(path: podspec_name)
        git_commit(path: [podspec_name],
               message: "#{version} release")
        add_git_tag(tag: "#{version}")
        push_to_git_remote
        
        pod_push(allow_warnings: true)
  end

    
    # lane :release do
    #     version = "v" + get_version_number(
    #                                        xcodeproj: "iOSClientExposure.xcodeproj",
    #                                        target: "iOSClientExposure"
    #                                        )
        
    #     if !git_tag_exists(tag: version)
            
    #         Action.sh("git branch '#{version}'")
    #         Action.sh("git checkout '#{version}'")
            
    #         fix_dependencies
            
    #         if !Action.sh("git diff --name-only").empty?
    #             Action.sh("git add -A")
    #             Action.sh("git commit -m 'Version: #{version}'")
    #         end
            
    #         update_graph
    #         run_unit_tests
            
    #         add_git_tag(tag: version)
    #         Action.sh("git push origin --all")
    #         Action.sh("git push --tags")
            
    #         current_time = Time.now.to_f
    #         project_name = ENV["PROJECT_TITLE"]
            
    #         slack(
    #               use_webhook_configured_username_and_icon: true,
    #               default_payloads: [],
    #               attachment_properties: {
    #                     pretext: "#{project_name} #{version} released",
    #                     color: "good",
    #                     text: "Released!",
    #                     footer: ENV["DEV_TEAM_NAME"],
    #                     ts: current_time,
    #                 }
    #               )
    #     end
    # end
    
    # Private lanes


    desc "Build project using spm"
    lane :run_spm_tests do

        # sh 'swift test -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk iphonesimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-ios13.0-simulator"'
        # UI.success("== iOS Project Unit Tests were Success ==")

        # sh 'swift test -Xswiftc "-sdk" -Xswiftc "`xcrun --sdk appletvsimulator --show-sdk-path`" -Xswiftc "-target" -Xswiftc "x86_64-apple-tvos13.0-simulator"'
        # UI.success("== tvOS Project Unit Tests were Success ==")


    end


    desc "Runs all the tests"
    lane :run_unit_tests do
        
        UI.success("== iOS Unit tests ==")
        scan(
             workspace: ENV["UNIT_TEST_WORKSPACE"],
             scheme: ENV["IOS_UNIT_TEST_SCHEME"]
             )
             
         UI.success("== tvOS Unit tests ==")
         scan(
              workspace: ENV["UNIT_TEST_WORKSPACE"],
              scheme: ENV["TVOS_UNIT_TEST_SCHEME"]
              )
                  
    end
    
    private_lane :fix_dependencies do
        version = "v" + get_version_number(
                                           xcodeproj: ENV["XCODE_PROJECT"],
                                           target: ENV["RELEASE_VERSION_TARGET"]
                                           )
        cartfile = File.expand_path("..",Dir.pwd) + "/Cartfile"
        UI.message(cartfile)
        if File.exists?(cartfile)
            temp_file = Tempfile.new('foo')
            begin
                File.open(cartfile, 'r') do |file|
                    file.each_line do |line|
                        if line.include? "EricssonBroadcastServices/"
                            temp_file.puts line.gsub('"master"',"== "+version)
                            else
                            temp_file.puts line
                        end
                    end
                end
                temp_file.close
                FileUtils.mv(temp_file.path, cartfile)
                ensure
                temp_file.close
                temp_file.unlink
            end
        end
    end
    
    desc "Checkout latest dependencies as declared in Cartfile.resolved"
    private_lane :update_graph do
        cartfile = File.expand_path("..",Dir.pwd)
        
        sh "cd #{cartfile} carthage.sh update --use-submodules --use-xcframeworks"
#        carthage(
#                 command: "update",
#                 platform: "iOS,tvOS",
#                 use_submodules: true,
#                 use_ssh: false,
#                 use_binaries: false,
#                 no_build: true
#                 )
#        update_dependency_graph()
    end
    
    
    private_lane :bump_build_number do

        new_build_number = increment_build_number(xcodeproj: "iOSClientExposure.xcodeproj")
        UI.message("Build: #{new_build_number}")
        commit_version_bump(
                            message: "Build number: #{new_build_number}",
                            xcodeproj: "iOSClientExposure.xcodeproj"
                            )
    end
    
    desc "Posts a success notification for development integration"
    desc "in the Players channel on Slack"
    private_lane :notify_slack_dev_success do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        project_name = ENV["PROJECT_TITLE"]
        
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: 'â€¢ %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
        
        UI.message(current_time)
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
              attachment_properties: {
                    pretext: "#{project_name} build #{current_build_number} succesful!",
                    color: "good",
                    text: changelog,
                    footer: ENV["DEV_TEAM_NAME"],
                    ts: current_time,
                }
              )
    end
    
    after_all do |lane|
        # This block is called, only if the executed lane was successful
        
    end
    
    error do |lane, exception|
        
        slack(
              message: exception.message,
              success: false
              )
              
              UI.error("====> ERROR")
    end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
